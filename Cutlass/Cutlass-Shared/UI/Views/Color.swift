//
//  Color.swift
//  Cutlass
//
//  Created by Rocco Bowling on 5/20/20.
//  Copyright Â© 2020 Rocco Bowling. All rights reserved.
//

import Foundation
import Flynn
import GLKit

public final class Color: Actor, Viewable, Colorable {
    public var safeColorable = ColorableState()

    private var bufferedGeometry = BufferedGeometry()

    public override init() {
        super.init()
        safeViewableInit()
    }

    private func _beRender(_ ctx: RenderFrameContext) {
        let bounds = ctx.view.bounds

        let geom = bufferedGeometry.next()
        let vertices = geom.vertices

        if geom.check(ctx) == false {
            vertices.reserve(6 * 7)
            vertices.clear()

            let xmin = bounds.xMin()
            let ymin = bounds.yMin()
            let xmax = bounds.xMax()
            let ymax = bounds.yMax()

            vertices.pushQuadVC(ctx.view.matrix,
                                GLKVector3Make(xmin, ymin, 0),
                                GLKVector3Make(xmax, ymin, 0),
                                GLKVector3Make(xmax, ymax, 0),
                                GLKVector3Make(xmin, ymax, 0),
                                safeColorable.color)
        }

        safeViewableSubmitRenderUnit(ctx, vertices, bounds.size())

        safeViewableSubmitRenderFinished(ctx)
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension Color {

    @discardableResult
    public func beRender(_ ctx: RenderFrameContext) -> Self {
        unsafeSend { self._beRender(ctx) }
        return self
    }

}
