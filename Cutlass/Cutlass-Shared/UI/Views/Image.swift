//
//  Color.swift
//  Cutlass
//
//  Created by Rocco Bowling on 5/20/20.
//  Copyright Â© 2020 Rocco Bowling. All rights reserved.
//

import Foundation
import Flynn
import GLKit

public final class Image: Actor, Viewable, Colorable, Imageable {
    public var safeColorable = ColorableState()
    public var safeImageable = ImageableState()

    private var bufferedGeometry = BufferedGeometry()

    public override init() {
        super.init()
        safeViewableInit()
    }

    private func _beRender(_ ctx: RenderFrameContext) {
        let bounds = ctx.view.bounds

        let geom = bufferedGeometry.next()
        let vertices = geom.vertices

        safeImageableConfirmImageSize(ctx)

        if geom.check(ctx, safeImageable.imageHash) == false {
            safeImageableFillVertices(ctx,
                                      safeColorable.color,
                                      bounds,
                                      vertices)
        }

        safeViewableSubmitRenderUnit(ctx,
                                     vertices,
                                     safeImageable.imageSize,
                                     .texture,
                                     safeImageable.path)

        safeViewableSubmitRenderFinished(ctx)
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension Image {

    @discardableResult
    public func beRender(_ ctx: RenderFrameContext) -> Self {
        unsafeSend { self._beRender(ctx) }
        return self
    }

}
