//
//  Color.swift
//  Cutlass
//
//  Created by Rocco Bowling on 5/20/20.
//  Copyright Â© 2020 Rocco Bowling. All rights reserved.
//

import Foundation
import Flynn
import GLKit

public class ColorableState {
    public var color: GLKVector4 = GLKVector4Make(1, 1, 1, 1)

    fileprivate func setColor(_ red: Float, _ green: Float, _ blue: Float, _ alpha: Float) {
        color = GLKVector4Make(red, green, blue, alpha)
    }

}

public protocol Colorable: Actor {
    var safeColorable: ColorableState { get set }
}

public extension Colorable {
    private func _beColor(_ red: Float, _ green: Float, _ blue: Float, _ alpha: Float) {
        safeColorable.setColor(red, green, blue, alpha)
    }

    private func _beAlpha(_ alpha: Float) {
        safeColorable.color.a = alpha
    }

    private func _beRGBA(_ ccc: UInt32) {
        let rrr = Float((ccc >> 24) & 0xFF) / 255.0
        let ggg = Float((ccc >> 16) & 0xFF) / 255.0
        let bbb = Float((ccc >> 8) & 0xFF) / 255.0
        let aaa = Float((ccc >> 0) & 0xFF) / 255.0
        safeColorable.color = GLKVector4Make(rrr, ggg, bbb, aaa)
    }

    private func _beClear() {
        safeColorable.setColor(0, 0, 0, 0)
    }

    private func _beWhite() {
        safeColorable.setColor(1, 1, 1, 1)
    }

    private func _beBlack() {
        safeColorable.setColor(0, 0, 0, 1)
    }

    private func _beGray() {
        safeColorable.setColor(0.7, 0.7, 0.7, 1.0)
    }

    private func _beRed() {
        safeColorable.setColor(1, 0, 0, 1)
    }

    private func _beGreen() {
        safeColorable.setColor(0, 1, 0, 1)
    }

    private func _beBlue() {
        safeColorable.setColor(0, 0, 1, 1)
    }

    private func _beYellow() {
        safeColorable.setColor(1, 1, 0, 1)
    }

    private func _beMagenta() {
        safeColorable.setColor(1, 0, 1, 1)
    }

    private func _beCyan() {
        safeColorable.setColor(0, 1, 1, 1)
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension Colorable {

    @discardableResult
    public func beColor(_ red: Float, _ green: Float, _ blue: Float, _ alpha: Float) -> Self {
        unsafeSend { self._beColor(red, green, blue, alpha) }
        return self
    }
    @discardableResult
    public func beAlpha(_ alpha: Float) -> Self {
        unsafeSend { self._beAlpha(alpha) }
        return self
    }
    @discardableResult
    public func beRGBA(_ ccc: UInt32) -> Self {
        unsafeSend { self._beRGBA(ccc) }
        return self
    }
    @discardableResult
    public func beClear() -> Self {
        unsafeSend(_beClear)
        return self
    }
    @discardableResult
    public func beWhite() -> Self {
        unsafeSend(_beWhite)
        return self
    }
    @discardableResult
    public func beBlack() -> Self {
        unsafeSend(_beBlack)
        return self
    }
    @discardableResult
    public func beGray() -> Self {
        unsafeSend(_beGray)
        return self
    }
    @discardableResult
    public func beRed() -> Self {
        unsafeSend(_beRed)
        return self
    }
    @discardableResult
    public func beGreen() -> Self {
        unsafeSend(_beGreen)
        return self
    }
    @discardableResult
    public func beBlue() -> Self {
        unsafeSend(_beBlue)
        return self
    }
    @discardableResult
    public func beYellow() -> Self {
        unsafeSend(_beYellow)
        return self
    }
    @discardableResult
    public func beMagenta() -> Self {
        unsafeSend(_beMagenta)
        return self
    }
    @discardableResult
    public func beCyan() -> Self {
        unsafeSend(_beCyan)
        return self
    }

}
